Program 2 Outline/notes


2 C programs (no other langs allowed)
	1st pgm) rooms program - contained in <STUDENT ONID USERNAME>.buildrooms.c
			-> creates a series of files that hold descriptions of the in-game rooms and how they are connected

	2nd pgm) game   -   called <STUDENT ONID USERNAME>.adventure.c
			-> provides an interface for playnig the game using the most recently generated rooms

			-> player will begin in "starting room"
				-> player will win game automatically upon entering "ending room"
					-> causes exit and displays path taken by player

			-> during game, player can also enter a cmd that rtns the current time - functionality utilizes mutexes and multithreading

	USE raw C (C89), not C99


	Rooms Program:
		-> must generate 7 different room files
			-> 1 room per file
			-> in directory: <STUDENT ONID USERNAME>.rooms.<PROCESS ID>
			-> I get to name these and they are hard coded into the pgm
				Ex: smithj.rooms.19903 (process ID not hardcoded)

		Each Room has:
			-> Room name
				-> max 8 chars (no #s, special chars, or spaces)
				-> need at least 10 room names in pgm
					-> rooms pgm randomly assign 1 of these to each room generated
					-> any given run will use 7 of the 10 hardcoded names
						-> rOne, rTwo, rThree, rFour, rFive, etc..
			-> at least 3 outgoing connections (at most 6)
				-> # of cons must be random from this room to other rooms
				-> if A to B, then B must also be to A (1 con each)
				-> room can't connect to itself or to another room more than once
			-> room type

			Each file must have this format:
				ROOM NAME: <room name>
				CONNECTION 1: <room name>
				…
				ROOM TYPE: <room type>

					Possible room types: START_ROOM, END_ROOM, MID_ROOM
						-> random, only 1 gets start, and 1 gets end

				Recommended building room graph method:
					add conns 2 at a time (forw and back) to randomly chosen room endpts, until the graph satisfies the requirements


		1) make the directory with the process ID     --- done
		2) create the structs for the 7 rooms that will be used
			-> this should be done randomly such that any 7 of the 10 could be used  -- r 7 done
			-> assign first chosen START, last chosen END, all others mid  -- done via r 7
			-> create a global struct array of 7 rooms
				-> go through and add connections in pairs (randomly) until we get the right stuff
		3) build the graph of rooms (connections)
		4) write each room struct to a different file


				113, 132, 


118 /* setup the directory with a new process ID */
119 void directorySetup(char targetDir[])
120 {
121         /* get the process id when the program was built */
122         /* getpid doesn't return an error value, always successful */
123         pid_t processID = getpid();
124
125         /* clear out the garbage, put in the new directory */
126         memset(targetDir, '\0', 32);
127         sprintf(targetDir, "kosterkl.rooms.%d", processID);
128         int result = mkdir(targetDir, 0755);
129 }


void createFiles(char targetDir[])


void createRooms(room roomsArray, char* roomsAvail)
void AddRandomConnection()
room GetRandomRoom()
int CanAddConnectionFrom (room x)
int ConnectionAlreadyExists(x, y)
void ConnectRoom(room x, room y)
int IsSameRoom(room x, room y)


 28 struct room
 29 {
 30         int id;
 31         char* name;
 32         char* type;
 33         int numOutConns;
 34         struct room* outConns[MAX_CONNS];
 35 };





	Games Program:
		Must present an interface to the player.
			-> room data needs to be read back into the program from the previously generated room files
				-> this part needs get the most recently created files via a stat() fn call on the room directory.
				-> open the 1 w/ most recent st_mtime component of the stat struct

			Must show whr player is, possible conns, and a prompt:
				CURRENT LOCATION: XYZZY
				POSSIBLE CONNECTIONS: PLOVER, Dungeon, twisty.
				WHERE TO? >| <- cursor should be here

				user types in exact name and hits return:
					CURRENT LOCATION: XYZZY
					POSSIBLE CONNECTIONS: PLOVER, Dungeon, twisty.
					WHERE TO? >twisty

					CURRENT LOCATION: twisty
					POSSIBLE CONNECTIONS: PLOVER, XYZZY, Dungeon, PLUGH.
					WHERE TO? >

			if user types invalid room name (case matters!), it should return an error:
					CURRENT LOCATION: XYZZY
					POSSIBLE CONNECTIONS: PLOVER, Dungeon, twisty.
					WHERE TO? >Twisty

					HUH? I DON’T UNDERSTAND THAT ROOM. TRY AGAIN.

					CURRENT LOCATION: XYZZY
					POSSIBLE CONNECTIONS: PLOVER, Dungeon, twisty.
					WHERE TO? >

					-> this doesn't increment the path history or the step count

			Once reaching the End Room, the game should indicate that it has been reached.
				-> print out the path the user took to get there and the # of steps taken (not # of rooms visited), a congrats msg, and then exit.
					-> WE NEED TO KEEP TRACK OF PATH HISTORY!

				-> when pgm exits, set the exit status code to 0, leaave the rooms directory in place to be examined.


				1) global array of room structs to in and store rooms
					a) find latest directory
						i) use prefix: "username.rooms."
							-> need things to hold latest time and the new directory (full)
					b) 












286                 sprintf(filePathAndName, "%s/%s", targetDir, roomsArray[i].name);
287                 filePtr = fopen(filePathAndName, "w");
288                 fprintf(filePtr, "ROOM NAME: %s\n", roomsArray[i].name);













